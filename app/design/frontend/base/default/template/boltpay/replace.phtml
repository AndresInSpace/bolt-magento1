<?php
/********************************************************************
 * Bolt replace button JavaScript / CSS that added to every pagge.
 ********************************************************************/

if(! Mage::getStoreConfig('payment/boltpay/active')) {
    return;
}

try {
    // force the calculation shipping and taxes, redundant, does not work
    // left for the reference, may be fixed or deleted in the future
    $quote = Mage::getSingleton('checkout/session')->getQuote();
    $quote->getShippingAddress()->setCollectShippingRates(true)->collectShippingRates()->save();
    $quote->collectTotals()->save();

} catch (Exception $e) {
    // no checkout session quote
}

$theme = Mage::getStoreConfig('payment/boltpay/theme');

/*******************************************************************************************
 * Creating the order at Bolt end, if applicable (cart not empty).
 * Generating BoltConnect.process code to be added below if buttons were found and replaced.
 *******************************************************************************************/
$bolt_connect = $this->getCartDataJs();

$test_mode = Mage::getStoreConfig('payment/boltpay/test');

$config_selectors = json_encode(array_filter(explode(',', Mage::getStoreConfig('payment/boltpay/selectors'))));

$bolt_only_payment = Mage::getStoreConfig('payment/boltpay/skip_payment');

$success_url = $this->getUrl(Mage::getStoreConfig('payment/boltpay/successpage'));
$save_order_url = $this->getUrl('boltpay/order/save');
$cart_url = $this->getUrl('checkout/cart');

$bolt_css_suffix = $this->getCssSuffix();

$selector_styles = Mage::getStoreConfig('payment/boltpay/selector_styles');

$selector_styles = array_map('trim', explode('||', trim($selector_styles)));

$selectors_css = '';

foreach ($selector_styles as $selector) {

    preg_match('/[^{}]+/', $selector, $selector_identifier);

    $selector_identifier = trim($selector_identifier[0]);

    $selector = trim($selector);
    preg_match_all('/[^{}]+{[^{}]*}/', $selector, $matches);

    foreach ($matches as $match_array) {
        foreach ($match_array as $match) {

            preg_match('/{[^{}]*}/', $match, $css);
            $css = $css[0];

            preg_match('/[^{}]+/', $match, $identifiers);

            foreach ($identifiers as $comma_delimited) {

                $comma_delimited = trim($comma_delimited);
                $single_identifiers = array_map('trim', explode(',', $comma_delimited));

                foreach ($single_identifiers as $identifier) {
                    $selectors_css .= $identifier . $selector_identifier . "-$bolt_css_suffix" . $css;
                    $selectors_css .= $selector_identifier . "-$bolt_css_suffix " . $identifier . $css;
                }
            }
        }
    }
}

$additional_css = Mage::getStoreConfig('payment/boltpay/additional_css');

?>


<script>

    // If Bolt Payment is in sandbox / test mode hide top checkout link
    if (<?=$test_mode; ?>) {

        var top_link_checkout = document.querySelectorAll('.top-link-checkout')[0];

        if (top_link_checkout) {
            //top_link_checkout.parentNode.style.display = 'none';
        }
    }

    (function(){

        var paymentonly_key = "<?= Mage::helper('core')->decrypt(Mage::getStoreConfig('payment/boltpay/publishable_key_onepage')); ?>";
        var multistep_key = "<?= Mage::helper('core')->decrypt(Mage::getStoreConfig('payment/boltpay/publishable_key_multipage')); ?>";

        // generic function for making jsonp calls
        var jsonpRequest = function(parent, element, attributes, params, callback_fn) {

            if (params) {

                var ts  = new Date().getTime();
                params.push('cachebust' + '=' + encodeURIComponent(ts));

                if (callback_fn) params.push('callback' + '=' + encodeURIComponent(callback_fn));

                params = params.join('&');
                attributes.src += '?' + params;
            }

            var el = document.createElement(element);

            if (attributes) {
                for (var attr in attributes) {
                    el.setAttribute(attr, attributes[attr]);
                }
            }

            var parent = document.getElementsByTagName(parent)[0];
            parent.appendChild(el);
        };

        // load connect.js with jsonp request
        var loadConnectJS = function(key) {
            jsonpRequest('body', 'script', {"src": "<?= $this->getJsUrl(); ?>", "id":"bolt-connect", "type":"text/javascript", "data-shopping-cart-id":"Magento", "data-publishable-key":key});
        };

        /****************************************************************************************************
         * Finds and replaces specified buttons witn Bolt checkout buttons. Runs internal function
         * on every 0.5 seconds up to 20 times. If no button was found for 10 seconds it clears the interlal
         ****************************************************************************************************/
        var replaceCheckout = function() {

            var replaceRetries  = 20;
            var replaceInterval = 500;


            // replaceable button selectors and types of Bolt buttons to replace them with
            var selectors = {
                ".block-cart .block-content .actions button.button" : "bolt-checkout-button with-cards bolt-multi-step-checkout forward-to-cart <?=$theme; ?>"
            };

            var config_selectors = JSON.parse('<?=$config_selectors;?>');

            for (var i = 0, length = config_selectors.length; i < length; i++ ) {

                var selector = config_selectors[i];
                selectors[selector] = "bolt-checkout-button with-cards bolt-multi-step-checkout " + selector.replace(/^[.#]*/, "").replace(/[.#]*$/, "") + "-<?=$bolt_css_suffix; ?> <?=$theme; ?>";
            }

            var tryInterval = setInterval(

                function() {

                    replaceRetries -= 1;
                    if (replaceRetries === 0) clearInterval(tryInterval);

                    var found_elements = false;

                    /*************************************************************
                     * Try to find all replaceable buttons in every iteration.
                     * Hide every button found and insert a Bolt button next to it.
                     *************************************************************/
                    for (var selector in selectors) {

                        if (selectors.hasOwnProperty(selector)) {

                            var elements = document.querySelectorAll(selector);

                            for (var i = 0, length = elements.length; i < length; i++ ) {

                                var element = elements[i];
                                found_elements = true;

                                element.style.display = "none";

                                var bolt_button =  document.createElement("div");
                                bolt_button.setAttribute("class",selectors[selector]);
                                //bolt_button.setAttribute("style", "<?=Mage::getStoreConfig('payment/boltpay/styles_multipage');?>");

                                element.parentNode.insertBefore(bolt_button, element);

                                if (element.parentNode.style.display === "") {
                                    element.parentNode.style.display = "block";
                                }
                            }
                        }
                    }

                    if (! found_elements) return;

                    if (<?=$bolt_only_payment;?>) {

                        var lis = document.querySelectorAll('ul.checkout-types li');

                        for (var i = 0, length = lis.length; i < length; i++) {
                            var li = lis[i];

                            if (li.style.display != "block")  li.style.display = "none";
                        }

                        var proceed_link = document.querySelectorAll('div.checkout_proceed_link a.button_link.checkout-proceed')[0];

                        if (proceed_link) {
                            proceed_link.text = proceed_link.text = "<?=$this->__('Proceed to Checkout');?>";
                        }
                    }

                    // Bolt buttons were placed on the page

                    // do nut run the replacement routine again
                    clearInterval(tryInterval);

                    // load Bolt connect javascript
                    loadConnectJS(multistep_key);

                    // On every 50 ms check if the Bolt connect.js javascript is inserted
                    // by checking the BoltConnect object existence. Clear the interval when
                    // BoltConnect is found. On products page the Bolt checkout button
                    // is set up to forward to the cart page. On cart page BoltConnect.process is executed.
                    var processInterval = setInterval(
                        function() {

                            if (typeof BoltConnect !== "undefined") {

                                clearInterval(processInterval);

                                // selector that indicates that forward to the cart
                                // functionality should be implemented, products page.
                                var forward_button = document.querySelectorAll('.forward-to-cart')[0];

                                if (forward_button) {

                                    var styleEl = document.createElement('style'), styleSheet;
                                    document.head.appendChild(styleEl);
                                    styleSheet = styleEl.sheet;
                                    styleSheet.insertRule("#bolt-modal-background { display:none; }", 0);

                                    forward_button.onclick = function(event){
                                        event.preventDefault();
                                        event.stopPropagation();
                                        location.href = '<?=$cart_url;?>';
                                    };
                                } else {
                                    <?=$bolt_connect; ?>
                                }
                            }

                        }, 50
                    );

                }, replaceInterval);
        };


        /****************************************************************************************************
         * Fire Checkout extension
         ****************************************************************************************************/
        var fireCheckout = function() {

            if (typeof FireCheckout !== "function") return false;

            FireCheckout.prototype.createBoltOrder = function() {

                if (this.loadWaiting != false) {
                    return;
                }

                if (!this.validate()) {
                    return;
                }

                var params = this.getFormData();

                checkout.setLoadWaiting(true);

                new Ajax.Request('<?=$this->getUrl('boltpay/order/firecheckoutcreate');?>', {
                    method:'post',
                    parameters:params,
                    onSuccess: this.setBoltResponse.bind(this),
                    onFailure: this.ajaxFailure.bind(this)
                });
            };

            FireCheckout.prototype.setBoltResponse = function(response){

                checkout.setLoadWaiting(false);

                var responseJSON = response.responseJSON;

                if (responseJSON.cart_data) {
                    eval(responseJSON.cart_data);
                    var bolt_button = document.querySelectorAll('.bolt-checkout-button-button')[0];
                    bolt_button.click();
                    setOverlay();
                } else {
                    this.setResponse(response);
                }
            };

            var i, length;

            var place_order_button = document.querySelectorAll('.button.btn-checkout')[0];

            var bolt_button =  document.createElement("div");
            bolt_button.setAttribute("class", "bolt-checkout-button with-cards <?=$bolt_css_suffix; ?> <?=$theme; ?>");
            //bolt_button.setAttribute("style", "<?=Mage::getStoreConfig('payment/boltpay/styles_onepage');?>");
            bolt_button.style.display = "none";

            place_order_button.parentNode.insertBefore(bolt_button, element);

            loadConnectJS(paymentonly_key);

            var payment_radios = document.querySelectorAll('[name="payment[method]"]');

            for (i = 0, length = payment_radios.length; i < length; i++) {

                var payment_radio = payment_radios[i];

                (function(payment_radio){

                    var payment_radio_onclick = payment_radio.onclick;

                    payment_radio.onclick = function() {

                        if (payment_radio.id == "p_method_boltpay") {
                            bolt_button.style.display="";
                            place_order_button.style.display="none";
                        } else {
                            bolt_button.style.display="none";
                            place_order_button.style.display="";
                        }

                        payment_radio_onclick.call(payment_radio);
                    };

                    if (<?=$bolt_only_payment;?>) {
                        if (payment_radio.id == "p_method_boltpay") {
                            payment_radio.click();
                        } else {
                            payment_radio.parentNode.style.display = "none";
                        }
                    }

                    if (payment_radio.checked) payment_radio.click();

                })(payment_radio);
            }


            var setOverlay = function() {

                var replaceRetries  = 10;
                var replaceInterval = 500;

                var tryInterval = setInterval(

                    function() {

                        replaceRetries -= 1;
                        if (replaceRetries <= 0) clearInterval(tryInterval);

                        if (typeof BoltConnect === "undefined") {
                            replaceRetries = 10;
                            return;
                        }

                        if (replaceRetries > 5) replaceRetries = 5;

                        BoltConnect.process(
                            {},
                            {},
                            {
                                check: function() {
                                    return false;
                                },
                                close: function() {
                                    setOverlay();
                                },
                                success: function(transaction, callback) {

                                    var onSuccess = function() {
                                        setTimeout(function(){location.href = '<?=$success_url;?>';}, 5000);
                                        callback();
                                    };

                                    var parameters = 'reference='+transaction.reference;

                                    new Ajax.Request(
                                        '<?=$save_order_url;?>',
                                        {
                                            method:'post',
                                            onSuccess: onSuccess,
                                            parameters: parameters
                                        }
                                    );
                                }
                            }
                        );

                        var bolt_button_overlay = document.getElementById('bolt_button_overlay');

                        if (bolt_button_overlay) {
                            clearInterval(tryInterval);
                            return;
                        }

                        var bolt_button = document.querySelectorAll('.bolt-checkout-button')[0];

                        if (! bolt_button) return;

                        bolt_button_overlay = document.createElement("div");
                        bolt_button_overlay.setAttribute("id", "bolt_button_overlay");
                        bolt_button_overlay.style.cssText = 'cursor:pointer;top:0;left:0;position:absolute;width:100%;height:60px;opacity:0.0;z-index:10000;background:#fff;';

                        bolt_button.appendChild(bolt_button_overlay);

                        bolt_button_overlay.onclick = function() {

                            clearInterval(tryInterval);

                            checkout.createBoltOrder();
                        };
                    },
                    replaceInterval
                );
            };

            setOverlay();

            window.onload = function () {

                var shipping_selected = false;
                var shipping_methods  = document.querySelectorAll('input[name=shipping_method]');

                for (i = 0, length = shipping_methods.length; i < length; i++) {
                    var shipping_method = shipping_methods[i];
                    if (shipping_method.checked) {
                        shipping_selected = true;
                        shipping_method.click();
                    }
                }

                if (!shipping_selected)  document.querySelectorAll('input[name=shipping_method]')[0].click();
            };

            return true;
        };

        if (!fireCheckout()) replaceCheckout();

    })();

</script>

<style>
<?=$selectors_css;?>
<?=$additional_css;?>
</style>
